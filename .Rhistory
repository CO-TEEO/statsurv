as_data_frame(q)
as_tibble(q)
as_tibble(q) %>%
set_colnames(1:ncol(q))
as_tibble(q) %>%
set_colnames(1:ncol(q)) %>%
mutate(rownames = 1:nrow(q))
as_tibble(q) %>%
set_colnames(1:ncol(q)) %>%
mutate(id_time = 1:nrow(q)) %>%
pivot_longer(-rownames, names_to = id_space, values_to = "yes")
as_tibble(q) %>%
set_colnames(1:ncol(q)) %>%
mutate(id_time = 1:nrow(q)) %>%
pivot_longer(-id_time, names_to = id_space, values_to = "yes")
as_tibble(q) %>%
set_colnames(1:ncol(q)) %>%
mutate(id_time = 1:nrow(q)) %>%
pivot_longer(-id_time, names_to = "id_space", values_to = "yes")
as.data.frame(q) %>%
set_colnames(1:ncol(q)) %>%
mutate(id_time = 1:nrow(q)) %>%
pivot_longer(-id_time, names_to = "id_space", values_to = "yes")
new_data <- as.data.frame(alarm_data) %>%
set_colnames(seq_len(ncol(alarm_data))) %>%
mutate(id_time = seq_len(nrow(alarm_data))) %>%
pivot_longer(-id_time, names_to = "id_space", values_to = value_col)
?set_colnames
lm_yhat
lm_yhat$augmented_data
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
lm_yhat
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
lm_yhat
collapse_if_exploded(lm_yhat)
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
spacetime_data
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
curr_row
fits_and_data
run_on_surveillance
handlers(global = FALSE)
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
curr_data
curr_row
curr_row$augmented_data
fits_and_data
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
curr_data
class(curr_data)
fits_and_data[[i, "surveillance_data"]]
class(fits_and_data[[i, "surveillance_data"]])
fits_and_data$surveillance_data
fits_and_data$surveillance_data[[i]]
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
new_data
?tidyr::pivot_longer
devtools::load_all(".")
fits_and_data$surveillance_data[[i]]
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
new_data
new_data <- as.data.frame(alarm_data) %>%
magrittr::set_colnames(seq_len(ncol(alarm_data))) %>%
dplyr::mutate(id_time = seq_len(nrow(alarm_data))) %>%
tidyr::pivot_longer(-id_time, names_to = "id_space", values_to = value_col,
names_transform = list("id_space" = as.numeric))
new_data
new_data <- as.data.frame(alarm_data) %>%
magrittr::set_colnames(seq_len(ncol(alarm_data))) %>%
dplyr::mutate(id_time = seq_len(nrow(alarm_data))) %>%
tidyr::pivot_longer(-id_time, names_to = "id_space", values_to = value_col,
names_transform = list("id_space" = as.integer))
new_data
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian", run_on_surveillance = FALSE)
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian", run_on_surveillance = FALSE) -> q
q$scan_results
set.seed(232892630)
space_coord <- rgdal::readOGR("three_zips/three_zips.shp",
verbose = FALSE,
stringsAsFactors = FALSE) %>%
gridcoord::gc_gridcoord()
spacetime_data_lg
space_coord <- sf::st_read("tests/testthat/three_zips/three_zips.shp", quiet = TRUE)
space_coord
space_coord <- sf::st_read("tests/testthat/three_zips/three_zips.shp",
quiet = TRUE) %>%
mutate(id_space = row_number())
space_coord
space_coord <- sf::st_read("tests/testthat/three_zips/three_zips.shp",
quiet = TRUE) %>%
mutate(id_space = row_number(), .before = everything())
space_coord
start_times <- 1:12
fin_times <- start_times + 1L
labels <- paste0("X", start_times) #sapply(start_times + 64, intToUtf8)
time_coord <- data.frame(time_labels = labels,
time = start_times,
fin_time = fin_times,
stringsAsFactors = FALSE) %>%
gridcoord::gc_gridcoord()
data_for_scan <- gridcoord::gc_expand(time_coord, space_coord)
data_for_scan$baseline <- 4.3
time_coord
space_coord
data_for_scan <- gridcoord::gc_expand(time_coord, select(space_coord, "id_time"))
data_for_scan <- gridcoord::gc_expand(time_coord, select(space_coord, "id_space"))
data_for_scan$baseline <- 4.3
data_for_scan$baseline2 <- 6
data_for_scan
cross_df(time_coord, space_coord)
?cross_df(time_coord, space_coord)
cross_df(list(time_coord, space_coord))
?tidyr::crossing
tidyr::crossing(space_coord, time_coord)
tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord)
tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord)
?str_sub
tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
transmute(id_space,
id_time = str_sub(time_labels, 2))
tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
transmute(id_space,
id_time = as.numeric(str_sub(time_labels, 2)))
tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
transmute(id_space,
id_time = as.numeric(str_sub(time_labels, 2))) %>%
arrange(id_space, id_time)
data_for_scan <- tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
transmute(id_space,
id_time = as.numeric(str_sub(time_labels, 2))) %>%
arrange(id_space, id_time)
data_for_scan$baseline <- 4.3
data_for_scan$baseline2 <- 6
data_for_scan
data_for_scan <- tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
transmute(id_space,
id_time = as.numeric(str_sub(time_labels, 2)),
zcta) %>%
arrange(id_space, id_time)
tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord)
data_for_scan <- tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
transmute(id_space,
id_time = as.numeric(str_sub(time_labels, 2)),
zcta_str) %>%
arrange(id_space, id_time)
data_for_scan$baseline <- 4.3
data_for_scan$baseline2 <- 6
# is_outbreak <- #space2 and space3, 10-13
is_outbreak <- data_for_scan$zcta_str %in% c("80401", "80203") & data_for_scan$time >= 9
tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord)
data_for_scan <- tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
transmute(id_space,
id_time = as.numeric(str_sub(time_labels, 2)),
zcta_str,
time) %>%
arrange(id_space, id_time)
data_for_scan$baseline <- 4.3
data_for_scan$baseline2 <- 6
# is_outbreak <- #space2 and space3, 10-13
is_outbreak <- data_for_scan$zcta_str %in% c("80401", "80203") & data_for_scan$time >= 9
data_for_scan$observed <- floor(data_for_scan$baseline + ifelse(is_outbreak, 4, 0))
data_for_scan
find_wanted_rows <- function(spacetime_data, col_to_check, step = 1) {
wanted_row_ids <- spacetime_data %>%
dplyr::ungroup() %>%
dplyr::mutate(.row_id = dplyr::row_number()) %>%
dplyr::rowwise() %>%
dplyr::filter(!is.null({{col_to_check}})) %>%
dplyr::group_by(id_space) %>%
dplyr::filter((dplyr::row_number() - 1) %% step == 0) %>%
dplyr::pull(.row_id)
wanted_row_ids
}
devtools::load_all(".")
rm(list = c("find_wanted_rows"))
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
wanted_row_ids
wanted_row_ids2
devtools::load_all(".")
devtools::load_all(".")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian", run_on_surveillance = FALSE)
data_for_scan
null_f <- function(space_coord, time_coord, data_for_model) {
return(42)
}
all_ret <- loop_model(data_for_scan, outcome_col = "observed", model_function = null_f, min_train = 7,n_predict = 1)
all_ret
data_for_scan
devtools::load_all(".")
data_for_scan
window_spacetime(data_for_scan, 7, Inf, 1, "multi")
devtools::load_all(".")
window_spacetime(data_for_scan, 7, Inf, 1, "multi")
windowed_for_scan <- window_spacetime(data_for_scan, 7, Inf, 1, "multi")
data_for_scan$.sample1 <- 4.3
data_for_scan$.sample2 <- 6
# is_outbreak <- #space2 and space3, 10-13
is_outbreak <- data_for_scan$zcta_str %in% c("80401", "80203") & data_for_scan$time >= 9
data_for_scan$observed <- floor(data_for_scan$baseline + ifelse(is_outbreak, 4, 0))
windowed_for_scan <- window_spacetime(data_for_scan, 7, Inf, 1, "multi")
windowed_for_scan$curr_data
space_coord
loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1, spatial_lookup = space_coord)
windowed_for_scan
windowed_for_scan$augmented_data <- windowed_for_scan$curr_data
loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1, spatial_lookup = space_coord)
loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1, spatial_lookup = space_coord) -> res
res$scan_results
windowed_for_scan$augmented_data
all_res <- loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1,
spatial_lookup = space_coord)
all_scan <- all_res
all_scan
all_scan <- all_res$scan_results
all_scan[[1]]
all_scan[[11]]
all_scan[[11]]$observed
sorted_output <- all_scan[[11]]$observed %>%
dplyr::arrange(zone, duration)
sorted_output <- all_scan[[11]]$observed %>%
dplyr::arrange(zone, duration)
all_scan
sorted_output
output_to_check <- sorted_output[sorted_output$duration == 1, ]
output_to_check
data_for_scan
input_data <- data_for_scan %>%
filter(id_time == 12)
input_data
expected_scores1 <- calculate_ebp_scores(input_data$observed, input_data$baseline)
calculate_ebp_scores <- function(n_z, mu_z) {
ebp_poisson_score <- n_z * log(n_z / mu_z) + mu_z - n_z
ebp_poisson_score[n_z < mu_z] <- 0
return(ebp_poisson_score)
}
expected_scores1 <- calculate_ebp_scores(input_data$observed, input_data$baseline)
expected_scores2 <- calculate_ebp_scores(input_data$observed, input_data$baseline2)
expected_scores_avg <- 0.5 * (expected_scores1 + expected_scores2)
expected_scores_avg
expect_equal(output_to_check$action_level, expected_scores_avg)
devtools::load_all(".")
library(tidyverse)
# We're going to set up a very basic model and then try to break it
space_coord <- data.frame(space_label = c("space1", "space2", "space3"),
stringsAsFactors = FALSE) %>%
gridcoord::gc_gridcoord()
start_times <- 1:12
fin_times <- start_times + 1L
labels <- paste0("X", start_times) #sapply(start_times + 64, intToUtf8)
time_coord <- data.frame(time_labels = labels,
time = start_times,
fin_time = fin_times,
stringsAsFactors = FALSE) %>%
gridcoord::gc_gridcoord()
data_for_model <- gridcoord::gc_expand(time_coord, space_coord)
data_for_model$y <- data_for_model$time * 1.05 + rnorm(n = nrow(data_for_model))
spacetime_data <- data_for_model %>%
mutate(id_space = as.numeric(factor(space_label)),
id_time = time) %>%
as_tibble() %>%
select(id_space, id_time, time, fin_time, y)
spacetime_data$id_time
# That works, but feels a little...fragile
# I feel like I would need to put in a way to make sure that the index is complete and ordered
# But otherwise, that does the major windowing that I want to do
simple_lm_func <- function(data_for_model) {
Sys.sleep(1)
fit <- lm(y ~ time,
data = data_for_model)
return(fit)
}
library(progressr)
handlers(global = TRUE)
lm_res <- loop_model(spacetime_data,
"y",
simple_lm_func,
data_prep_function = NULL,
min_train = 7,
max_train = 10,
n_predict = 1,
model_arity = "uni",
prediction_strategy = "NA")
devtools::load_all(".")
lm_res <- loop_model(spacetime_data,
"y",
simple_lm_func,
data_prep_function = NULL,
min_train = 7,
max_train = 10,
n_predict = 1,
model_arity = "uni",
prediction_strategy = "NA")
devtools::load_all(".")
lm_res <- loop_model(spacetime_data,
"y",
simple_lm_func,
data_prep_function = NULL,
min_train = 7,
max_train = 10,
n_predict = 1,
model_arity = "uni",
prediction_strategy = "NA")
lm_res
lm_res %>% filter(id_space == 2)
lm_res %>% filter(id_space == 2) %>% filter(id_time > 10) %>% pull(curr_data)
lm_res %>% filter(id_space == 2) %>% filter(id_time > 10) %>% pull(training_data)
devtools::load_all(".")
lm_yhat <- loop_extract_yhat(lm_res,"extract",  NULL, include_surveillance = TRUE)
lm_yhat$augmented_data
lm_yhat$surveillance_data
loop_alarm_function(lm_yhat, "y", "parallel_cusum_gaussian")
devtools::load_all(".")
set.seed(232892630)
space_coord <- sf::st_read("tests/testthat/three_zips/three_zips.shp",
quiet = TRUE) %>%
mutate(id_space = row_number(), .before = everything())
space_coord <- sf::st_read("tests/testthat/three_zips/three_zips.shp",
quiet = TRUE) %>%
dplyr::mutate(id_space = row_number(), .before = everything())
space_coord <- sf::st_read("tests/testthat/three_zips/three_zips.shp",
quiet = TRUE) %>%
dplyr::mutate(id_space = dplyr::row_number(), .before = dplyr::everything())
start_times <- 1:12
fin_times <- start_times + 1L
labels <- paste0("X", start_times) #sapply(start_times + 64, intToUtf8)
time_coord <- data.frame(time_labels = labels,
time = start_times,
fin_time = fin_times,
stringsAsFactors = FALSE)
data_for_scan <- tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
transmute(id_space,
id_time = as.numeric(str_sub(time_labels, 2)),
zcta_str,
time) %>%
arrange(id_space, id_time)
data_for_scan <- tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
dplyr::transmute(id_space,
id_time = as.numeric(str_sub(time_labels, 2)),
zcta_str,
time) %>%
dplyr::arrange(id_space, id_time)
data_for_scan <- tidyr::crossing(sf::st_drop_geometry(space_coord), time_coord) %>%
dplyr::transmute(id_space,
id_time = as.numeric(stringr::str_sub(time_labels, 2)),
zcta_str,
time) %>%
dplyr::arrange(id_space, id_time)
data_for_scan$baseline <- 4.3
data_for_scan$.sample1 <- 4.3
data_for_scan$.sample2 <- 6
# is_outbreak <- #space2 and space3, 10-13
is_outbreak <- data_for_scan$zcta_str %in% c("80401", "80203") & data_for_scan$time >= 9
data_for_scan$observed <- floor(data_for_scan$baseline + ifelse(is_outbreak, 4, 0))
windowed_for_scan <- window_spacetime(data_for_scan, 7, Inf, 1, "multi")
windowed_for_scan$augmented_data <- windowed_for_scan$curr_data
loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1, spatial_lookup = space_coord)
devtools::load_all(".")
loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1, spatial_lookup = space_coord)
calculate_ebp_scores <- function(n_z, mu_z) {
ebp_poisson_score <- n_z * log(n_z / mu_z) + mu_z - n_z
ebp_poisson_score[n_z < mu_z] <- 0
return(ebp_poisson_score)
}
test_that("loop_alarm_function runs", {
expect_error(loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1,
spatial_lookup = space_coord),
NA)
})
# We can at least check the scores
test_that("loop_alarm_function works?", {
all_res <- loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1,
spatial_lookup = space_coord)
all_scan <- all_res$scan_results
sorted_output <- all_scan[[11]]$observed %>%
dplyr::arrange(zone, duration)
output_to_check <- sorted_output[sorted_output$duration == 1, ]
input_data <- data_for_scan %>%
filter(id_time == 12)
expected_scores1 <- calculate_ebp_scores(input_data$observed, input_data$baseline)
expected_scores2 <- calculate_ebp_scores(input_data$observed, input_data$baseline2)
expected_scores_avg <- 0.5 * (expected_scores1 + expected_scores2)
expect_equal(output_to_check$action_level, expected_scores_avg)
})
# We can at least check the scores
test_that("loop_alarm_function works?", {
all_res <- loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1,
spatial_lookup = space_coord)
all_scan <- all_res$scan_results
sorted_output <- all_scan[[11]]$observed %>%
dplyr::arrange(zone, duration)
output_to_check <- sorted_output[sorted_output$duration == 1, ]
input_data <- data_for_scan %>%
dplyr::filter(id_time == 12)
expected_scores1 <- calculate_ebp_scores(input_data$observed, input_data$baseline)
expected_scores2 <- calculate_ebp_scores(input_data$observed, input_data$baseline2)
expected_scores_avg <- 0.5 * (expected_scores1 + expected_scores2)
expect_equal(output_to_check$action_level, expected_scores_avg)
})
# We can at least check the scores
test_that("loop_alarm_function works?", {
all_res <- loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1,
spatial_lookup = space_coord)
all_scan <- all_res$scan_results
sorted_output <- all_scan[[11]]$observed %>%
dplyr::arrange(zone, duration)
output_to_check <- sorted_output[sorted_output$duration == 1, ]
input_data <- data_for_scan %>%
dplyr::filter(id_time == 11)
expected_scores1 <- calculate_ebp_scores(input_data$observed, input_data$baseline)
expected_scores2 <- calculate_ebp_scores(input_data$observed, input_data$baseline2)
expected_scores_avg <- 0.5 * (expected_scores1 + expected_scores2)
expect_equal(output_to_check$action_level, expected_scores_avg)
})
all_res <- loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1,
spatial_lookup = space_coord)
all_res
all_scan <- all_res$scan_results
sorted_output <- all_scan[[11]]$observed %>%
dplyr::arrange(zone, duration)
output_to_check <- sorted_output[sorted_output$duration == 1, ]
input_data <- data_for_scan %>%
dplyr::filter(id_time == 11)
output_to_check
expected_scores1 <- calculate_ebp_scores(input_data$observed, input_data$baseline)
expected_scores1
expected_scores2 <- calculate_ebp_scores(input_data$observed, input_data$baseline2)
expected_scores1 <- calculate_ebp_scores(input_data$observed, input_data$.sample1)
expected_scores2 <- calculate_ebp_scores(input_data$observed, input_data$.sample2)
expected_scores_avg <- 0.5 * (expected_scores1 + expected_scores2)
expect_equal(output_to_check$action_level, expected_scores_avg)
# We can at least check the scores
test_that("loop_alarm_function works?", {
all_res <- loop_alarm_function(windowed_for_scan, "observed", "scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 1,
spatial_lookup = space_coord)
all_scan <- all_res$scan_results
sorted_output <- all_scan[[11]]$observed %>%
dplyr::arrange(zone, duration)
output_to_check <- sorted_output[sorted_output$duration == 1, ]
input_data <- data_for_scan %>%
dplyr::filter(id_time == 11)
expected_scores1 <- calculate_ebp_scores(input_data$observed, input_data$.sample1)
expected_scores2 <- calculate_ebp_scores(input_data$observed, input_data$.sample2)
expected_scores_avg <- 0.5 * (expected_scores1 + expected_scores2)
expect_equal(output_to_check$action_level, expected_scores_avg)
})
### scan_eb_poisson
all_res <- loop_alarm_function(windowed_for_scan, "observed",
"scan_eb_poisson",
run_on_surveillance = FALSE, max_k = 3)
### scan_eb_poisson
all_res <- loop_alarm_function(windowed_for_scan, "observed",
"scan_eb_poisson",
spatial_lookup = space_coord,
run_on_surveillance = FALSE, max_k = 3)
?scanstatistics::scan_eb_negbin
source('~/r-analysis/statsurv/dev/profile_test.R')
for(i in 1:10) {
all_yhat <- loop_extract_yhat(space_coord, time_coord,
simple_lm_output[[1]], simple_lm_output[[2]],
path_to_model = simple_lm_func,
use_cache = FALSE,
verbose = FALSE)
}
for(i in 1:100) {
all_yhat <- loop_extract_yhat(space_coord, time_coord,
simple_lm_output[[1]], simple_lm_output[[2]],
path_to_model = simple_lm_func,
use_cache = FALSE,
verbose = FALSE)
}
for(i in 1:100) {
all_yhat <- loop_extract_yhat(space_coord, time_coord,
simple_lm_output[[1]], simple_lm_output[[2]],
path_to_model = simple_lm_func,
use_cache = FALSE,
verbose = FALSE,use_surveillance_residuals = FALSE)
}
?INLA::inla.posterior.sample
?loop_extract_yhat
usethis::create_package(path = "~/projects/covid_reports", check_name = FALSE)
usethis::create_package(path = "C:/Users/promerpr/Documents/projects/covid_reports", check_name = FALSE)
