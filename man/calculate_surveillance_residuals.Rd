% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_to_surveillance.R
\name{calculate_surveillance_residuals}
\alias{calculate_surveillance_residuals}
\title{Convert a set of ordinary predictions into surveillance predictions}
\usage{
calculate_surveillance_residuals(
  aug_datas,
  time_ids,
  n_predict,
  grow_length = FALSE
)
}
\arguments{
\item{n_predict}{For each dataframe in \code{list_of_dataframes}, how many time points were \emph{not} used
in fitting the model?  Can be a scalar, a vector the same length as \code{list_of_dataframes}, or
\code{NULL} (see Details).}

\item{grow_length}{Boolean. Should the size of the returned dataframes increase as the number of
available surveillance predictions increase?}

\item{list_of_dataframes}{A list of data.frames, organized from oldest to newest. Each data.frame
should represent predictions or fitted values from a model trained on a subset of the data in
the data.frame.  Each dataframe must contain columns corresponding to \code{space_coord} and
\code{time_coord}, as well as 1 or more columns containing the data of interest.}

\item{return_last_only}{Boolean. Should the function return only the predictions for the last
entry in \code{list_of_dataframes}, or for all entries?}
}
\value{
If \code{return_last_only = TRUE}, then a single dataframe giving the surveillance predictions
for the last entry in \code{list_of_dataframes}. If \code{return_last_only = FALSE}, then a list of
dataframes giving the surveillance predictions for every entry in \code{list_of_dataframes}. If
\code{grow_length = FALSE}, then surveillance predictions will never be reported for a time point
not included in the corresponding dataframe in \code{list_of_dataframes}.  If \code{grow_lenth = TRUE},
then each data frame will contain all of the surveillance predictions calculated up to that
point.
}
\description{
Takes a set of data predicted by a model and removes all the data points that were
used in fitting the model.
}
\details{
Unlike ordinary model predictions, which are reported for all data points, surveillance
predictions are only reported for points that were not used in calculating the model fit. For
example, if a model was run at time \eqn{t} and the time points \eqn{0} to \eqn{(t-1)} were
used to calculate the model fit, but model predictions were generated for time points
\eqn{0} through \eqn{t}, then the only surveillance predictions would be at time point
\eqn{t}.

Given a list of ordinary model predictions, from the same model fit sequentially on different
sets of data, \code{convert_to_surveillance} combines surveillance predictions from multiple model
fits. For each data frame in \code{list_of_dataframes}, the data is split into time points that
were used to calculate the model fit and time points that were not. No changes are made to the
data for the time points not used to calculate the model fit. For all other time points, the
data is either replaced with surveillance predictions made at earlier time points, or removed
the data if no predictions are available.

The split into time points that were and were not used in calculating the model fit is
controlled by the paramater \code{n_predict}. If \code{n_predict = n}, then we assume that in each data
frame, the most recent \code{n} time points were not used in the model fit. If \code{n_predict = NULL},
then we assume that all time points in a dataframe that are not contained in any earlier
dataframes were not used in fitting the model.
}
\examples{
library("scanstatistics")
library("magrittr")
library("gridcoord")
library("sf")
data(NM_popcas)
NM_popcas$county <- as.character(NM_popcas$county)
nm_county_coord <- statsurv::nm_county_coord
year_coord <- data.frame(year = 1973:1991)

glm_func <- function(space_coord, time_coord, data_for_model) {
  mod <- glm(count ~ year,
             family = poisson(link = "log"),
             offset = log(population),
             data = data_for_model)
  return(list(fit = mod,
              data = data_for_model))
}

fits_and_data <- loop_model(nm_county_coord, year_coord, NM_popcas,
                            outcome_col = "count",
                            path_to_model = glm_func)
all_fits <- fits_and_data[[1]]
all_data <- fits_and_data[[2]]

all_yhats <- loop_extract_yhat(nm_county_coord, year_coord,
                               all_fits, all_data,
                               yhat_extractor_name = "extract",
                               use_surveillance_residuals = FALSE)

# Use convert_to_surveillance to convert into surveillance predictions,
# allowing us to create surveillance residuals
convert_to_surveillance(nm_county_coord, year_coord, all_yhats,
                        n_predict = 1)

# Use grow_length = TRUE, return_last_only = TRUE
# to generate a single data frame with all the surveillance predictions:
convert_to_surveillance(nm_county_coord, year_coord, all_yhats,
                        n_predict = 1,
                        grow_length = TRUE,
                        return_last_only = TRUE)
}
