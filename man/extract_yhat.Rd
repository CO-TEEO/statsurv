% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_yhat.R
\name{extract_yhat}
\alias{extract_yhat}
\title{Extract fitted values from a model fit object}
\usage{
extract_yhat(fit, data, ...)
}
\arguments{
\item{fit}{A model fit object, such as that generated by \code{lm} or \code{glm}.}

\item{data}{A data.frame containig the data that should be used to predict the fitted values.
Must have all of the covariates used by the model fit object to calculate fitted values, as
well as columns corresponding to \code{space_coord} and \code{time_coord}}

\item{...}{Additional arguments passed into other methods}

\item{space_coord}{A gridcoord object (\code{\link[gridcoord]{gc_gridcoord}}) describing the
spatial area that is covered by \code{fit} and \code{data}.}

\item{time_coord}{A gridcoord object (\code{\link[gridcoord]{gc_gridcoord}}) describing the time
span that is covered by \code{fit} and \code{data}, as well as any additional time points for which
outcome variables should be predicted.  This coordinate must be ordered, with the first entries
in the dataframe corresponding to the earliest time periods and the last entries corresponding
to the most recent.}
}
\value{
A data.frame whose first two columns correspond to \code{space_coord} and \code{time_coord}, and
whose remaining columns are the point estimates or random samples of the fitted values.
}
\description{
A consistent method for extracting fitted values from a model fit object.
\code{extract_yhat} returns point estimates for the fitted values while \code{sample_yhat} returns 1 or
more random samples from the fitted values, using the variance-covariance matrix of the
coefficients.
}
\details{
For \code{lm}  and \code{glm} models, \code{extract_yhat} is a friendly wrapper around the
\code{\link[stats]{predict}} method, but it can also extract fitted values from some models
that do not have \code{predict} methods, including \code{INLA} and \code{forecast_ARIMA} models. \code{sample_yhat}
uses the \code{\link[arm]{sim}} function to draw samples of the fitted values for \code{lm} and
\code{glm} models.
}
\section{Functions}{
\itemize{
\item \code{extract_yhat}: Return point estimates for fitted values
}}

\examples{
library("scanstatistics")
nm_county_coord <- statsurv::nm_county_coord
data(NM_popcas)
year_coord <- generate_date_range(lubridate::ymd("1973-01-01"),
                                  lubridate::ymd("1991-01-01"),
                                  time_division = "year")
year_coord$year <- year_coord$date_label
year_coord <- gridcoord::gc_gridcoord(year_coord, "year")



# Fit a model to all the data, and then extract predictions:
fit <- glm(count ~ year,
           family = poisson(link = "log"),
           offset = log(population),
           data = NM_popcas)

# Then use extract_yhat to get out predictions for our observed variable:
extract_yhat(nm_county_coord, year_coord, fit, NM_popcas)

# Use sample_yhat to draw random samples from the output:
sample_yhat(nm_county_coord, year_coord, fit, NM_popcas, n_samples = 10)

\dontrun{
# We can use INLA models if available as well:
fit_inla <- INLA::inla(count ~ year + f(county, model = "iid"),
                       family = "poisson",
                       control.family = list(link = "log"),
                       offset = log(population),
                       # These 2 options required to use extract_yhat and sample_yhat
                       control.predictor = list(compute = TRUE),
                       control.compute = list(config = TRUE),
                       data = NM_popcas)

extract_yhat(nm_county_coord, year_coord, fit_inla, NM_popcas)

sample_yhat(nm_county_coord, year_coord, fit_inla, NM_popcas, n_samples = 10)
}
}
\seealso{
\code{\link{extract_yhat.forecast_ARIMA}}
}
