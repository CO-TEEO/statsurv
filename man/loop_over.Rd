% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loop_over.R
\name{loop_over}
\alias{loop_over}
\title{Iterate over lists and gridlists}
\usage{
loop_over(
  space_coord,
  time_coord,
  list_of_stuff,
  f,
  verbose = interactive(),
  title = NULL,
  use_cache = FALSE,
  path_to_model = NULL,
  force = FALSE,
  extra_args = list()
)
}
\arguments{
\item{space_coord}{A gridcoord object
(\code{\link[gridcoord]{gc_gridcoord}}) describing the spatial area that is
covered by \code{list_of_stuff}}

\item{time_coord}{A gridcoord object (\code{\link[gridcoord]{gc_gridcoord}})
describing the temporal area that is to be covered by the model. This coordinate must be
ordered, with the first entries in the dataframe corresponding to the earliest time periods and
the last entries corresponding to the most recent.}

\item{list_of_stuff}{Either a list or a \code{\link[gridcoord:gcl_gridlist]{gridlists}} generated
by one of the other looping functions in \code{statsurv}. The names of the entries in the list or
gridlist must correspond to the values in \code{time_coord} if \code{list_of_stuff} is a list or to the
values in both \code{time_coord} and \code{space_coord} if \code{list_of_stuff} is a
\code{\link[gridcoord:gcl_gridlist]{gridlist}}}

\item{f}{The function to apply to each element}

\item{verbose}{Should updates be printed to the console?}

\item{title}{If \code{verbose = TRUE}, the title of the progress bar}

\item{use_cache}{Should the results from this function be saved (cached), so that the results can
be quickly loaded without having to re-run the calculation?}

\item{path_to_model}{The path to the model function, or the function itself, used to calculate
the model fits in \code{\link{loop_model}}. Only used in setting up the cache.}

\item{force}{If previous results have been cached, should the function be forced to redo the
calculations? \code{force} can be a single logical value or a vector indicating specific time
points to be re-calculated.}

\item{extra_args}{A named list containing additional parameters to supply to the
extractor function.}
}
\value{
A list or a \code{\link[gridcoord:gcl_gridlist]{gridlist}} with the same length or
dimensions as \code{list_of_stuff}. Each entry in the list or
\code{\link[gridcoord:gcl_gridlist]{gridlist}} is the result of the function \code{f} applied to the
corresponding entry in \code{list_of_stuff}.
}
\description{
Like \code{\link[base]{lapply}} or \code{\link[purrr]{map}}, \code{loop_over} provides a
flexible way to iterate over a list of objects. \code{loop_over} is designed to work with objects
organized either by time or by both space and time, making it more specialized than these other
options.  \code{loop_over} includes support for \code{\link[gridcoord:gcl_gridlist]{gridlists}},
two-dimensional lists for organizing information in both space and time, provides flexible
tools for dispatching arguments, and has support for caching built in to it.
}
\details{
Additional arguments can be passed to \code{f} by including them as entries in
the \code{extra_args} parameter. All the components in \code{extra_args} will be passed
through unchanged to \code{f} \strong{unless} any of the components are lists with
the same names as the \code{list_of_stuff} argument. In this case, each time the extrctor
function is run, \code{loop_over} will pass a different element of the component into \code{f}
}
\section{Caching overview}{

Caching in the \code{statsurv} is done using the \code{\link[simplecache:cache_wrap]{simplecache}}
package. The first time you run this function with \code{use_cache = TRUE}, it will create a
sub-directory based on the value of \code{path_to_model}, where it will save the returned values
from every iteration. The next time you run the function, \code{simplecache} will check if the
function inputs are identical to a previous run. If so, \code{simplecache} will load the model
output from disc instead of re-fitting the model.

Determing when to use the cache is not always straightforward, so it is possible that
\code{simplecache} will make a mistake sometimes and use a cached value when it should not. The
\code{force} argument to allows you to override the default behavior, and force the function to
re-calculate the results from scratch.

Some functions take an additional argument \code{save_environments} that controls how fit objects
and formulas as saved. These objects often capture their entire environment when they are
created, which can cause the saved objects to be extremely large. Setting
\code{save_environments = FALSE} removes the captured environments from the model fits when
saving them.
}

\examples{
space_coord <- gridcoord::gc_stubcoord()
time_coord <- data.frame(time = c("t1", "t2", "t3"),
                         stringsAsFactors = FALSE)
simple_list <- list(t1 = c(1, 2), t2 = c(2, 4), t3 = c(5, NA))

# Calculate the mean of every entry in a list:
loop_over(space_coord, time_coord, simple_list, mean)

# Calculate the mean of every entry in a list,
# with na.rm = TRUE
loop_over(space_coord, time_coord, simple_list, mean,
          extra_args = list(na.rm = TRUE))

# Multiply each entry in a list by the entry in another list:
loop_over(space_coord, time_coord, simple_list, function(x, b) x * b,
          extra_args = list(b = list(t1 = 3, t2 = 4, t3 = 0)))

list_s1 <- list("t1" = 1, "t2" = 2, "t3" = 3)
list_s2 <- list("t1" = 10, "t2" = 20, "t3" = 30)
space_coord <- data.frame(space = c("space1", "space2"),
                          stringsAsFactors = FALSE)
st_list <- gridcoord::gcl_gridlist(list(space1 = list_s1,
                                        space2 = list_s2),
                                   space_coord,
                                   time_coord)

# Multiply each entry in a gridlist by 2:
loop_over(space_coord, time_coord, st_list, function(x) x*2)

}
\seealso{
Other looping functions: 
\code{\link{loop_alarm_function}()},
\code{\link{loop_extract_yhat}()},
\code{\link{loop_model}()}
}
\concept{looping functions}
