% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loop_alarm_function.R
\name{loop_alarm_function}
\alias{loop_alarm_function}
\title{Apply an alarm function to the output of \code{loop_model} and \code{loop_extract_yhat}}
\usage{
loop_alarm_function(
  fits_and_data,
  outcome_col,
  alarm_function_name,
  run_on_surveillance = TRUE,
  grow_surveillance = TRUE,
  max_k,
  spatial_lookup = NULL,
  n_mcsim = 10,
  ...
)
}
\arguments{
\item{outcome_col}{The name of the column in the data.frames in \code{list_of_model_data}
containing the primary outcome (e.g., the number of elevated cases).}

\item{alarm_function_name}{The name of the alarm function to call. See the list of supported
alarm functions below.}

\item{max_k}{The maximum number of locations to be included in any one zone when constructing
spatial zones for scan-type alarm functions,}

\item{n_mcsim}{A non-negative integer; the number of replicate scan
statistics to generate in order to calculate a \eqn{P}-value.}

\item{...}{Additional parameters to pass to the specified alarm function.}

\item{space_coord}{A gridcoord object
(\code{\link[gridcoord]{gc_gridcoord}}) describing the spatial area that is
covered by \code{list_of_yhats} and \code{list_of_model_data}}

\item{time_coord}{A gridcoord object (\code{\link[gridcoord]{gc_gridcoord}})
describing the temporal area that is covered by \code{list_of_yhats} and \code{list_of_model_data}. This
coordinate must be ordered, with the first entries in the coordinate corresponding to the
earliest time periods and the last entries corresponding to the most recent.}

\item{list_of_yhats}{Either a list or a \link[gridcoord]{gridlist} generated by
\code{\link{loop_extract_yhat}}. Each entry of the list must be a data.frame with columns
corresponding to \code{space_coord}, \code{time_coord}, and one or more columns of predicted values.
These entries must either be in a single list organized by time, or a
\link[gridcoord]{gridlist} organized by both space and time.}

\item{list_of_model_data}{Either a list or a \link[gridcoord]{gridlist}, generated by
\code{\link{loop_model}}. Each entry of \code{list_of_model_data} must be a data.frame with columns
corresponding to \code{space_coord}, \code{time_coord}, and a column containing the primary outcome of
interest. These entries must either be in a single list organized by time, or a
\link[gridcoord]{gridlist} organized by both space and time.}

\item{extra_alarm_args}{A named list containing additional parameters to supply to the
alarm function. Consult the documentation for the individual alarm functions for details.}

\item{use_cache}{Should the results from this function be saved (cached), so that the results can
be quickly loaded without having to re-run the calculation? Likely only to save time when
applying a scan-type alarm function and both \code{max_k} and \code{n_mcsim} are large.}
}
\value{
A list organized by time, where each entry is the result from the individual alarm
function. For the alarm functions that begin "parallel_", each entry is a matrix where the
columns correspond to spatial region and rows correspond to time period; for all other alarm
functions entries are objects of class \code{scanstatistics}. All results have an attribute
"alarm_type" describing whether they are a scan-type alarm function or a parallel-type alarm
function.

All returned \code{scanstatistics} objects have been slightly standardized:
\itemize{
\item{The returned object now contains the component \code{zone_info} containing information
about the spatio-temporal zones}
\item{The returned object always contains the component \code{observed}, giving the likelihood
of an outbreak in each spatio-temporal zone}
\item{The components \code{observe}, \code{MLC}, and \code{replicates} (if applicable) always contain the
column \code{action_level}. The higher the value of this column, the greater the likelihood of
an outbreak. This column is identical to \code{score} for all scan-type alarm functions except
for \code{\link[scanstatistics]{scan_bayes_negbin}}, where it is equal to \code{log_posterior}}
}
}
\description{
Given a set of observations and a set of baseline predictions, apply an alarm
function sequentially in time.
}
\details{
\code{loop_alarm_function} repeatedly applies an alarm function to a set of observations and
baseline predictions. The alarm function cannot be supplied by the user, and must be one of the
functions built into \code{\link{standardized_alarm_functions}}.

All of the supported alarm functions support observations in multiple spatial and temporal
regions. If either \code{list_of_yhats} or \code{list_of_model_data} are
\link[gridcoord:gridlist]{gridlists}, they will be collapsed down to a single list organized by
time before applying the alarm function.

Parallel-type alarms functions, such as \code{\link{parallel_cusum_poisson}} consider each
spatial region independently, and calculate 1 alarm statistic for each region. Scan-type alarm
functions, such as \code{\link[scanstatistics]{scan_eb_poisson}} aggregate spatial regions into
\emph{zones}, and calculate an alarm statistic for each zone. The creation of zones from spatial
regions is done using a k-nearest neighbors approach. This means that zones are constructed by
starting with each region individually, and sequentially adding its first-nearest-neighbor, then
its second-nearest neighbor, and so on up to a maximum size of \code{max_k}.
}
\section{Using \code{loop_alarm_function} with \code{\link{loop_model}} and \code{\link{loop_extract_yhat}}}{

\code{loop_alarm_function} is designed to used in conjunction with \code{\link{loop_model}} and
\code{\link{loop_extract_yhat}}. The coordinate arguments, \code{space_coord} and \code{time_coord}
should be identical to those used by the other two functions. \code{list_of_model_data} should be
generated by  \code{\link{loop_model}}, and \code{list_of_yhats} should be generated by
\code{\link{loop_extract_yhat}}.  \code{path_to_model} is optional for \code{loop_alarm_function}, but to
most clearly organize the cached information, it should match the value used in the other two
functions.
}

\section{Supported Alarm Functions}{

The following alarm functions are supported:
\itemize{
\item{\code{\link[scanstatistics]{scan_eb_poisson}}}
\item{\code{\link[scanstatistics]{scan_pb_poisson}}}
\item{\code{\link[scanstatistics]{scan_eb_negbin}}}
\item{\code{\link[scanstatistics]{scan_eb_zip}}}
\item{\code{\link[scanstatistics]{scan_permutation}}}
\item{\code{\link[scanstatistics]{scan_bayes_negbin}}}
\item{\code{\link{scan_eb_poisson_fast}}}
\item{\code{\link{scan_eb_negbin_fast}}}
\item{\code{\link{scan_cusum_poisson}}}
\item{\code{\link{parallel_cusum_poisson}}}
\item{\code{\link{parallel_cusum_gaussian}}}
\item{\code{\link{parallel_shewhart_gaussian}}}
}
}

\section{Caching overview}{

Caching in the \code{statsurv} is done using the \code{\link[simplecache:cache_wrap]{simplecache}}
package. The first time you run this function with \code{use_cache = TRUE}, it will create a
sub-directory based on the value of \code{path_to_model}, where it will save the returned values
from every iteration. The next time you run the function, \code{simplecache} will check if the
function inputs are identical to a previous run. If so, \code{simplecache} will load the model
output from disc instead of re-fitting the model.

Determing when to use the cache is not always straightforward, so it is possible that
\code{simplecache} will make a mistake sometimes and use a cached value when it should not. The
\code{force} argument to allows you to override the default behavior, and force the function to
re-calculate the results from scratch.

Some functions take an additional argument \code{save_environments} that controls how fit objects
and formulas as saved. These objects often capture their entire environment when they are
created, which can cause the saved objects to be extremely large. Setting
\code{save_environments = FALSE} removes the captured environments from the model fits when
saving them.
}

\examples{
library("scanstatistics")
library("magrittr")
library("gridcoord")
data(NM_popcas)
NM_popcas$county <- as.character(NM_popcas$county)
NM_popcas$date_label <- as.character(NM_popcas$year)

nm_county_fips_2010 <- statsurv::nm_county_fips_2010
nm_county_fips_2010$county <- gsub(" ", "", tolower(nm_county_fips_2010$county_name))
nm_county_fips_2010 <- nm_county_fips_2010[nm_county_fips_2010$county != "cibola", ]
nm_county_fips_2010 <- gc_gridcoord(nm_county_fips_2010, "county")

year_coord <- generate_date_range(lubridate::ymd("1973-01-01"),
                                  lubridate::ymd("1991-01-01"),
                                  time_division = "year")

glm_func <- function(space_coord, time_coord, data_for_model) {
  mod <- glm(count ~ year,
             family = poisson(link = "log"),
             offset = log(population),
             data = data_for_model)
  return(list(fit = mod,
              data = data_for_model))
}

fits_and_data <- loop_model(nm_county_fips_2010, year_coord, NM_popcas,
                            outcome_col = "count",
                            path_to_model = glm_func)
all_fits <- fits_and_data[[1]]
all_data <- fits_and_data[[2]]

all_yhats <- loop_extract_yhat(nm_county_fips_2010, year_coord, all_fits, all_data,
                               yhat_extractor_name = "extract",
                               use_surveillance_residuals = FALSE)


# Finally, crate alarm statistics
# A scan-type alarm:
all_alarms <- loop_alarm_function(nm_county_fips_2010, year_coord, all_yhats, all_data,
                                  outcome_col = "count",
                                  alarm_function_name = "scan_eb_poisson",
                                  max_k = 3,
                                  n_mcsim = 10)

all_alarms <- loop_alarm_function(nm_county_fips_2010, year_coord, all_yhats, all_data,
                                  outcome_col = "count",
                                  alarm_function_name = "scan_bayes_negbin",
                                  max_k = 3)


# Or a parallel-type alarm:
all_alarms <- loop_alarm_function(nm_county_fips_2010, year_coord, all_yhats, all_data,
                                  outcome_col = "count",
                                  alarm_function_name = "parallel_cusum_poisson",
                                  extra_alarm_args = list(scaling = 1.25))
}
\seealso{
\code{\link{standardized_alarm_functions}} for more information about the available
alarm functions; \code{\link{space_coord_to_zones}} for generating zones manually.

Other looping functions: 
\code{\link{loop_extract_yhat}()},
\code{\link{loop_model}()},
\code{\link{loop_over}()}
}
\concept{looping functions}
